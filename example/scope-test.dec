
module Example where

{-
  Imports.
-}
import Data-Maybe using (Maybe, from-just, maybe)
import Data-Bool  using (Bool, if)
import Data-Int   using (Int)
import Data-Pair  using (Pair, plus, minus)

-- Single function
--
sig id : type a. a -> a
sig const : type a b. b -> a -> a

val id = \x -> x

-- Another single function
--
val const = \y, x -> x

-- Mutually-recursive block
--
sig f : Int -> Int
sig g : Int -> Int

val f = \x -> g x
val g = \x -> f x

{-
  Single type
-}
kind Unit : *
type Unit = {}

kind Some : * => *
kind Many : * => *

type Some a =
  { head : a
  , tail : Many a
  }

type Many a =
  < #Nil  : Unit
  , #Cons : Some a
  >

-- Typeclass
--
class Eq a {
  eq : a -> a -> Bool
}

-- Typeclass w/deps
--
class Ord a when
  Eq a
{
  cmp : a -> a -> Ord a
}

-- Typeclass w/many fields
--
class Monoid a {
  mempty  : a;
  mappend : a -> a -> a
}

-- Typeclass w/many fields, params & decls
--
class Action m a when
  Ord m,
  Monoid a
{
  act : a -> m -> m;
  tca : m -> a -> a
}

-- Instance
--
instance type a b. Ord (Pair a b) when
  Ord a, Ord b
{
  cmp = \a, b -> mappend (cmp a.fst b.fst) (cmp a.snd b.snd);
  boo = \a, b -> b
}

-- HKT
--
kind Fix : (* => *) => *
type Fix f = {
  fix : f (Fix f)
}

-- Local let-rec
--
sig foo : Int -> Int -> Int
val foo = \x, y ->
  let
    sig f : Int,
    sig g : Int,
    val f = g,
    val g = f;
  plus x y

-- Record literal
--
sig obj : Int
val obj =
{
  foo = \x -> 2,
  bar = plus 4
}

-- Record Update
--
sig subj : Int
val subj = \a -> with obj do
  { bar = minus 3
  , foo = a.get  -- record access
  }

-- Usage of #-constructors
--
sig list : Many Int
val list = #Cons
  { head = 1
  , tail = #Nil {}
  }

-- Case split
--
sig a : Int
val a =
  case list of {
    #Cons p -> p.head;
    #Nil  u -> 0
  }

-- Case split #2
--
sig b : Int
val b = case list of
  { #Cons p -> p.head
  ; #Nil  u -> 0
  }